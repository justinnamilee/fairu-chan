#!/usr/bin/perl

use strict;

# Cute script-chan for managing files!


use YAML;
use File::Spec;
use File::Copy;
use File::Path qw[make_path];


sub badExit()
{
  warn qq[\nErrors found while running, terminating.\n];

  exit 1;
}


###
# prototypes & globals

sub scanDir(_);

my $data = undef;
my $meta = undef;
my $run = undef;
my $hook = undef;
my %dir = ();
my %map = ();


###
# import & validate conf

if (-f $ARGV[0] && (my $conf = YAML::LoadFile($ARGV[0])))
{
  if (ref($conf) eq 'HASH' && ref($conf->{data}) eq 'HASH' && ref($conf->{meta}) eq 'HASH')
  {
    $data = $conf->{data};
    $meta = $conf->{meta};

    # optional config section, will fail if improperly setup
    if (ref($meta->{discord}) eq 'HASH')
    {
      require Data::Validate::URI;

      if (Data::Validate::URI::is_https_uri($meta->{discord}->{webhookUrl}) && length($meta->{discord}->{template}) > 0) {
        require WebService::Discord::Webhook;

        my $wh = WebService::Discord::Webhook->new(url => $meta->{discord}->{webhookUrl}, verify_SSL => 1);

        # catch errors and wrap them
        eval { $wh->get() };

        if ($@)
        {
          warn qq[Failed to configure Discord support:\n\t$@];

          badExit();
        }
        else
        {
          print qq[Configured with Discord support: $wh->{name} @ $wh->{channel_id}\n];

          $hook = sub { $wh->execute(sprintf($meta->{discord}->{template}, @_)) };
        }
      }
      else
      {
        warn qq[Failed to validate config: check Discord webhookUrl or template string\n];

        badExit();
      }
    }
    else
    {
      warn qq[Discord key present in config, but not setup, skipping\n];
    }

    # validate the groupings
    foreach my $t (sort keys(%{$data}))
    {
      badExit() unless (validGrouping($t, $data->{$t}));
    }
  }
  else
  {
    warn qq[Failed to load config: invalid format, see example\n];

    badExit();
  }
}
else
{
  warn qq[Failed to load config: '$ARGV[0]' either not a readable file or invalid YAML\n];

  badExit();
}

print qq[Configuration validated\n];

if (defined($ARGV[1]) && lc($ARGV[1]) eq q[run])
{
  $run = 1;

  print qq[Configured for 'run' mode\n];
}


###
# scan directories

foreach my $k (keys(%{$data}))
{
  $dir{$data->{$k}->{inFile}->{basePath}}++;
}

foreach my $d (sort(keys(%dir)))
{
  $dir{$d} = [scanDir($d)];
}


###
# filter for files

foreach my $k (keys(%{$data}))
{
  my $g = $data->{$k};
  my $r = qr[$g->{inFile}->{inRegex}];

  foreach my $p (@{$dir{$g->{inFile}->{basePath}}})
  {
    my ($v, $d, $f) = File::Spec->splitpath($p);

    if ($f =~ $r)
    {
      # %+ is the special hash for named capture groups in Perl regex, we sort them and stuff them into sprintf
      my $out = File::Spec->join($g->{outFile}->{basePath}, sprintf($g->{outFile}->{outSprintf}, map { $+{$_} } sort keys(%+)));

      unless (-e $out)
      {
        $map{$p} = $out;
      }
    }
  }
}


###
# copy time!

foreach my $op (sort keys(%map))
{
  my $np = $map{$op};
  my ($vol, $dir, $fil) = File::Spec->splitpath($np);
  my $path = File::Spec->join($vol, $dir);

  if ($run && not -d $path)
  {
    unless (make_path($path))
    {
      warn qq[Failed to create path: '$path': $!\n];
    }
  }

  if (defined($data->{fileMode}) && lc($data->{fileMode}) eq q[move])
  {
    print qq[move($op, $np)\n];

    if ($run)
    {
      if (move($op, $np))
      {
        $hook->($fil) if defined($hook);
      }
      else
      {
        warn qq[Failed to move: '$op' to '$np': $!\n];
      }
    }
  }
  else
  {
    print qq[copy($op, $np)\n];
    
    if ($run)
    {
      if (copy($op, $np))
      {
        $hook->($fil) if defined($hook);
      }
      else
      {
        warn qq[Failed to copy: '$op' to '$np': $!\n];
      }
    }
  }
}



###
# subroutines

sub scanDir(_)
{
  my ($path, @f) = @_;

  if (opendir(my $dh, $path))
  {
    @f = map { File::Spec->join($path, $_) } grep { !/^\.\.?$/ } readdir($dh);
  }

  return @f;
}

sub validGrouping($$)
{
  my ($t, $g) = @_;

  unless (ref($g) eq 'HASH')
  {
    warn qq[Failed to validate config: grouping should be a hash/object for '$t'\n];
    return (undef);
  }

  unless (lc($g->{fileMode}) eq q[move] || lc($g->{fileMode}) eq q[copy])
  {
    warn qq[Failed to validate config: fileMode should be 'copy' or 'move' for '$t'\n];
    return (undef);
  }

  unless (ref($g->{inFile}) eq 'HASH' && ref($g->{outFile}))
  {
    warn qq[Failed to validate config: inFile/outFile should be a hash/object for '$t'\n];
    return (undef);
  }

  unless (-d $g->{inFile}->{basePath})
  {
    warn qq[Failed to validate config: basePath '$g->{inFile}->{basePath}' is not a directory for '$t'\n];
    return (undef);
  }

  unless (-d $g->{outFile}->{basePath} || $meta->{create})
  {
    warn qq[Failed to validate config: basePath '$g->{outFile}->{basePath}' is not a directory for '$t'\n];
    return (undef);
  }

  unless (length($g->{inFile}->{inRegex}) > 0)
  {
    warn qq[Failed to validate config: inRegex should be a string of length > 0 for '$t'\n];
    return (undef);
  }

  unless (length($g->{outFile}->{outSprintf}) > 0)
  {
    warn qq[Failed to validate config: outSprintf should be a string of length > 0 for '$t'\n];
    return (undef);
  }

  return (1);
}
